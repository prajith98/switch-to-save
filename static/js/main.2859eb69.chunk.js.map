{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["converter","require","App","props","handleNum1Change","e","target","value","setState","n1","Number","replace","formatNumber","parseInt","toLocaleString","num1","handleNum2Change","n2","num2","addAction","x","state","result","total","resetAction","className","type","onChange","this","name","words","onClick","readOnly","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAGIA,G,MAAYC,EAAQ,KAwETC,E,kDArEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,iBAAmB,SAAAC,GACjB,GAAoB,KAAjBA,EAAEC,OAAOC,MAAW,CACrB,EAAKC,SAAS,CAAEC,GAAIC,OAAOL,EAAEC,OAAOC,MAAMI,QAAQ,KAAM,OACxD,IAAMC,EAAeC,SAASR,EAAEC,OAAOC,MAAMI,QAAQ,KAAM,KAAKG,eAAe,SAC/E,EAAKN,SAAS,CAAEO,KAAMH,SAGtB,EAAKJ,SAAS,CAACC,GAAI,EAAEM,KAAK,MApBX,EAuBnBC,iBAAmB,SAAAX,GACjB,GAAoB,KAAjBA,EAAEC,OAAOC,MAAW,CACrB,EAAKC,SAAS,CAAES,GAAIP,OAAOL,EAAEC,OAAOC,MAAMI,QAAQ,KAAM,OACxD,IAAMC,EAAeC,SAASR,EAAEC,OAAOC,MAAMI,QAAQ,KAAM,KAAKG,eAAe,SAC/E,EAAKN,SAAS,CAAEU,KAAMN,SAGtB,EAAKJ,SAAS,CAACS,GAAI,EAAEC,KAAK,MA9BX,EAkCnBC,UAAW,SAACd,GACV,IAAIe,EAAI,EAAKC,MAAMZ,GAAK,EAAKY,MAAMJ,GACnC,EAAKT,SAAS,CAACc,OAAQ,UAAUF,EAAEN,eAAe,WAClD,EAAKN,SAAS,CAACe,MAAMH,KArCJ,EAuCnBI,YAAa,SAACnB,GACZ,EAAKG,SAAS,CACZc,OAAQ,UACRb,GAAI,EACJQ,GAAI,EACJF,KAAM,GACNG,KAAM,GACNK,MAAM,KA3CR,EAAKF,MAAQ,CACXC,OAAQ,UACRb,GAAI,EACJQ,GAAI,EACJF,KAAM,GACNG,KAAM,GACNK,MAAO,GATQ,E,qDAkDjB,OACE,yBAAKE,UAAU,OACb,6BACA,2BAAOC,KAAK,OAAOC,SAAUC,KAAKxB,iBAAkBG,MAAOqB,KAAKP,MAAMN,KAAMc,KAAK,SACjF,4BAAK7B,EAAU8B,MAAoB,IAAdF,KAAKP,MAAMZ,IAAQE,QAAQ,SAAS,KACzD,iCACA,2BAAOe,KAAK,OAAOC,SAAUC,KAAKZ,iBAAkBT,MAAOqB,KAAKP,MAAMH,KAAMW,KAAK,SACjF,4BAAK7B,EAAU8B,MAAoB,IAAdF,KAAKP,MAAMJ,IAAQN,QAAQ,SAAS,KACzD,6BAAK,6BACL,4BAAQc,UAAU,OAAOM,QAASH,KAAKT,WAAvC,aACA,4BAAQM,UAAU,MAAMM,QAASH,KAAKJ,aAAtC,SACA,6BAAK,6BACL,2BAAOC,UAAU,QAAQC,KAAK,OAAOnB,MAAOqB,KAAKP,MAAMC,OAAQU,UAAQ,IACvE,4BAAKhC,EAAU8B,MAAuB,IAAjBF,KAAKP,MAAME,OAAWZ,QAAQ,SAAS,U,GAhEjDsB,aCOCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2859eb69.chunk.js","sourcesContent":["import './App.css';\n\nimport React, { Component } from 'react'\nvar converter = require('paisa.js');\n\n class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = { \n      result: \"Total: \",\n      n1: 0,\n      n2: 0,\n      num1: \"\",\n      num2: \"\",\n      total: 0\n    }\n  }\n\n  handleNum1Change = e => {\n    if(e.target.value!==\"\"){\n      this.setState({ n1: Number(e.target.value.replace(/,/g, '')) });\n      const formatNumber = parseInt(e.target.value.replace(/,/g, '')).toLocaleString('en-IN');\n      this.setState({ num1: formatNumber });\n    }\n    else{\n      this.setState({n1: 0,num1:\"\"})\n    }\n  };\n  handleNum2Change = e => {\n    if(e.target.value!==\"\"){\n      this.setState({ n2: Number(e.target.value.replace(/,/g, '')) });\n      const formatNumber = parseInt(e.target.value.replace(/,/g, '')).toLocaleString('en-IN');\n      this.setState({ num2: formatNumber });\n    }\n    else{\n      this.setState({n2: 0,num2:\"\"})\n    }\n  };\n\n  addAction =(e)=> {\n    let x = this.state.n1 + this.state.n2\n    this.setState({result: \"Total: \"+x.toLocaleString('en-IN') })\n    this.setState({total:x})\n  }\n  resetAction =(e)=> {\n    this.setState({ \n      result: \"Total: \",\n      n1: 0,\n      n2: 0,\n      num1: \"\",\n      num2: \"\",\n      total:0\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\"> \n        <br></br>\n        <input type=\"text\" onChange={this.handleNum1Change} value={this.state.num1} name=\"num1\" />\n        <h5>{converter.words(this.state.n1*100).replace(\"rupees\",\"\")}</h5>\n        <h1>+</h1>\n        <input type=\"text\" onChange={this.handleNum2Change} value={this.state.num2} name=\"num2\" />\n        <h5>{converter.words(this.state.n2*100).replace(\"rupees\",\"\")}</h5>\n        <br/><br/>\n        <button className=\"Calc\" onClick={this.addAction}>Calculate</button>\n        <button className=\"Res\" onClick={this.resetAction}>Reset</button>\n        <br/><br/>\n        <input className=\"total\" type=\"text\" value={this.state.result} readOnly/>\n        <h5>{converter.words(this.state.total*100).replace(\"rupees\",\"\")}</h5>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}